#ifndef JUSTANOTHERCATGIRL_EMBED_H
#define JUSTANOTHERCATGIRL_EMBED_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

const char* RESOURCE_MACRO = 
".macro add_resource resource_name, file_name		\n"
".global \\resource_name				\n"
"	.type \\resource_name, @object			\n"
"	.balign 4					\n"
"\\resource_name:					\n"
"	.incbin \"\\file_name\"				\n"
"end_\\resource_name:					\n"
"	.global \\resource_name\\()_size		\n"
"	.type \\resource_name\\()_size, @object		\n"
"	.balign 4					\n"
"\\resource_name\\()_size:				\n"
"	.int end_\\resource_name - \\resource_name	\n"
".endm							\n"
;
const char* HEADER_PROLOGUE = 
"#ifndef AUTOGENERATED_RESOURCES_H\n"
"#define AUTOGENERATED_RESOURCES_H\n"
"#ifdef __cplusplus\n"
"extern \"C\" {\n"
"#endif // __cplusplus\n"
;
const char* HEADER_EPILOGUE = 
"#ifdef __cplusplus\n"
"}\n"
"#endif // __cplusplus\n"
"#endif // AUTOGENERATED_RESOURCES_H\n"
;

bool can_be_ident(char c) {
	return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || c == '_' || ('0' <= c && c <= '9');
}

void make_ident_inplace(char* string) {
	if (*string >= '0' && *string <= '9') *string='_';
	for (; *string; ++string) {
		if(!can_be_ident(*string)) *string='_';
	}
}

bool embed_resources(const char* resources[], size_t size, const char* out) {
	size_t sizeof_out = strlen(out);
	char	*file_s = calloc(sizeof_out+3, 1),
		*file_h = calloc(sizeof_out + 3, 1);
	strcpy(file_s, out);
	strcpy(file_h, out);
	strcpy(file_s+sizeof_out, ".s");
	strcpy(file_h+sizeof_out, ".h");
	
	FILE* assembly = fopen(file_s, "w+");
	FILE* header = fopen(file_h, "w+");
	if (assembly == NULL || header == NULL) return false;
	fputs(RESOURCE_MACRO, assembly);
	fputs(".section .rodata\n", assembly);
	fputs(HEADER_PROLOGUE, header);
	for(size_t i = 0; i < size; ++i) {
		char* changed_ident = malloc(strlen(resources[i]) + 1);
		memcpy(changed_ident, resources[i], strlen(resources[i]) + 1);
		make_ident_inplace(changed_ident);
		fprintf(assembly, "add_resource \"%s\", \"%s\"\n", changed_ident, resources[i]);
		fprintf(header, "extern unsigned char %s[];\n"
				"extern unsigned int %s_size;\n", changed_ident, changed_ident);
		free(changed_ident);
	}
	fputs(HEADER_EPILOGUE, header);
	fclose(assembly);
	fclose(header);
	free(file_s);
	free(file_h);
	return true;
}

#endif // JUSTANOTHERCATGIRL_EMBED_H
